name: Release macOS Intel DMG

on:
  # 发布标签时产出 DMG（推荐）
  push:
    tags:
      - "v*"
  # 也可以手动触发
  workflow_dispatch:

jobs:
  build-mac-intel-dmg:
    name: Build DMG (macOS Intel x64)
    runs-on: macos-13  # macos-13 运行在 Intel 硬件；macos-14 是 Apple Silicon
    env:
      # 根据你的应用名调整（用于输出文件命名）
      APP_NAME: MCPRouter
      # 如果使用 electron-builder，则以下变量可选：签名/公证时需要
      CSC_LINK: ${{ secrets.MAC_CERT_P12_BASE64 }}   # (可选) Apple Developer 证书（base64）
      CSC_KEY_PASSWORD: ${{ secrets.MAC_CERT_PWD }}  # (可选) 证书密码
      APPLE_ID: ${{ secrets.APPLE_ID }}              # (可选) Apple ID
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PWD }} # (可选) App 专用密码
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}    # (可选) 团队 ID
      # 默认使用 x64 目标
      ARCH: x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 如果你的项目是 Node/Electron 项目，保留以下步骤；否则请删除 Node 相关并告诉我你的技术栈
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            corepack enable
            corepack prepare pnpm@latest --activate
            pnpm i --frozen-lockfile
          elif [ -f "yarn.lock" ]; then
            corepack enable
            corepack prepare yarn@stable --activate
            yarn --frozen-lockfile
          else
            npm ci
          fi

      # 可选：如果你有前端打包流程（如 vite/react），在这里构建
      - name: Build frontend (optional)
        if: ${{ hashFiles('package.json') != '' && hashFiles('package.json') != null }}
        run: |
          if grep -q "\"build\":" package.json; then
            npm run build || true
          fi

      # 使用 electron-builder 生成 DMG（请确保 devDependencies 里有 electron-builder）
      - name: Build DMG with electron-builder (x64)
        run: |
          npx electron-builder --mac dmg --${ARCH} --publish never

      # 产物通常位于 dist/ 或 release/ 目录，下面会自动查找 .dmg 并上传
      - name: Find DMG
        id: find_dmg
        run: |
          set -e
          DMG_PATH=$(find . -type f -name "*.dmg" | head -n 1)
          if [ -z "$DMG_PATH" ]; then
            echo "No DMG found. Make sure electron-builder outputs a .dmg (check electron-builder config)."
            exit 1
          fi
          echo "dmg=$DMG_PATH" >> "$GITHUB_OUTPUT"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macOS-Intel
          path: ${{ steps.find_dmg.outputs.dmg }}

      # 如果是打 tag 触发，可把 DMG 附到 GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_dmg.outputs.dmg }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
