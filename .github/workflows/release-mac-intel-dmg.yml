name: Build macOS Intel DMG

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-mac-dmg:
    runs-on: macos-13
    env:
      CI: true
      # 这些仍然用于公证
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_PWD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enable pnpm
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      # 🔐 导入 Developer ID Application 证书到临时钥匙串（签名必须）
      - name: Import signing certificate
        shell: bash
        env:
          MAC_CERT_P12_BASE64: ${{ secrets.MAC_CERT_P12_BASE64 }}
          MAC_CERT_PWD: ${{ secrets.MAC_CERT_PWD }}
        run: |
          set -euxo pipefail
          echo "$MAC_CERT_P12_BASE4" >/dev/null 2>&1 || true  # 占位防止未使用变量警告
          # 解码 p12
          echo "$MAC_CERT_P12_BASE64" | base64 --decode > certificate.p12
          # 创建临时钥匙串
          KEYCHAIN=build.keychain
          security create-keychain -p "" "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          # 导入证书（允许 codesign 和 security 访问）
          security import certificate.p12 -k "$HOME/Library/Keychains/$KEYCHAIN" -P "$MAC_CERT_PWD" -A -T /usr/bin/codesign -T /usr/bin/security
          # 确认身份可见
          security find-identity -v -p codesigning "$HOME/Library/Keychains/$KEYCHAIN" || true

      # 在 monorepo 根目录安装
      - name: Install dependencies (workspace root)
        run: pnpm install --frozen-lockfile

      # 编译所有 workspace 包
      - name: Build workspace packages
        run: pnpm -r run build

      # ⚠️ forge.config.js 里必须 asar: true；否则会再报 AutoUnpackNatives 的错
      - name: Build and Make DMG
        working-directory: apps/electron
        run: pnpm make

      - name: List output files (debug)
        run: ls -R apps/electron/out/make || true

      - name: Find DMG
        id: find_dmg
        run: |
          DMG_PATH=$(find apps/electron/out/make/ -name "*.dmg" | head -n 1)
          if [ -z "$DMG_PATH" ]; then
            echo "No DMG found in apps/electron/out/make/"
            exit 1
          fi
          echo "dmg=$DMG_PATH" >> $GITHUB_OUTPUT

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: MCPRouter-macOS-Intel
          path: ${{ steps.find_dmg.outputs.dmg }}

      - name: Release to GitHub
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_dmg.outputs.dmg }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
